[{"apiVersion":"influxdata.com/v2alpha1","kind":"Dashboard","metadata":{"name":"friendly-moore-d51001"},"spec":{"charts":[{"colors":[{"id":"base","name":"white","type":"text","hex":"#ffffff"}],"height":3,"kind":"Table","name":"Fluvius smart meter: Metadata (general)","queries":[{"query":"import \"array\"\r\n\r\nfields = [\"gas_m3\"] // Dummy: need at least one\r\ntags = [\"identification\", \"equipment_id\", \"message_long\"]\r\nwindowSizeMultiplier = 20\r\n\r\nfrom(bucket: \"fluvius_smart_meter_downsampled\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"fluvius_smart_meter_gas\")\r\n  |> filter(fn: (r) => contains(value: r[\"_field\"], set: fields))\r\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"] |> array.concat(v: tags))\r\n  |> aggregateWindow(every: duration(v: int(v: v.windowPeriod) * windowSizeMultiplier), fn: last, createEmpty: false) // Limit output size by downsampling\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\") // Make all fields also columns like tags\r\n  |> drop(columns: [\"_start\", \"_stop\"])\r\n  |> group(columns: []) // Reset grouping"}],"staticLegend":{},"tableOptions":{"verticalTimeAxis":true},"timeFormat":"YYYY-MM-DD HH:mm:ss","width":6},{"colors":[{"id":"base","name":"white","type":"text","hex":"#ffffff"}],"height":3,"kind":"Table","name":"Fluvius smart meter: Metadata (Gas-specific)","queries":[{"query":"import \"array\"\n\nfields = [\"gas_valve_position\"]\ntags = [\"meter_id_gas\", \"gas_device_type\"]\nwindowSizeMultiplier = 20\n\nfrom(bucket: \"fluvius_smart_meter_downsampled\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"fluvius_smart_meter_gas\")\n  |> filter(fn: (r) => contains(value: r[\"_field\"], set: fields))\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"] |> array.concat(v: tags))\n  |> aggregateWindow(every: duration(v: int(v: v.windowPeriod) * windowSizeMultiplier), fn: last, createEmpty: false) // Limit output size by downsampling\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\") // Make all fields also columns like tags\n  |> drop(columns: [\"_start\", \"_stop\"])\n  |> group(columns: []) // Reset grouping"}],"staticLegend":{},"tableOptions":{"verticalTimeAxis":true},"timeFormat":"YYYY-MM-DD HH:mm:ss","width":4,"yPos":3},{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear"}],"colorizeRows":true,"colors":[{"id":"TwooplzR5EG1HUtcEhNOF","name":"Nineteen Eighty Four","type":"scale","hex":"#31C0F6"},{"id":"sYRO6-yoS0q06YIfGGeS3","name":"Nineteen Eighty Four","type":"scale","hex":"#A500A5"},{"id":"Opb4JSFCMoLLgwEUVIjut","name":"Nineteen Eighty Four","type":"scale","hex":"#FF7E27"},{"id":"base","name":"honeydew","type":"text","hex":"#7CE490"},{"id":"RrNgTqqgM1uYTxR5bPPzH","name":"fire","type":"text","hex":"#DC4E58"}],"decimalPlaces":0,"height":4,"heightRatio":0.2,"hoverDimension":"auto","kind":"Single_Stat_Plus_Line","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Fluvius smart meter: Power draw from net","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"import \"array\"\n\nfields = [\"power_delivered\", \"power_returned\"]\ntags = []\nwindowSizeMultiplier = 1\n\nfrom(bucket: \"fluvius_smart_meter_downsampled\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"fluvius_smart_meter_electricity\")\n  |> filter(fn: (r) => contains(value: r[\"_field\"], set: fields))\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"] |> array.concat(v: tags))\n  |> aggregateWindow(every: duration(v: int(v: v.windowPeriod) * windowSizeMultiplier), fn: mean, createEmpty: false) // Limit output size by downsampling\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> drop(columns: [\"_start\", \"_stop\"])\n  |> group(columns: [])\n  |> map(fn: (r) => ({r with power_draw: (r.power_delivered - r.power_returned) * 1000.0}))\n  |> drop(columns: [\"power_delivered\", \"power_returned\"])"}],"staticLegend":{"colorizeRows":true,"heightRatio":0.2,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":6,"widthRatio":1,"yPos":6},{"colors":[{"id":"base","name":"white","type":"text","hex":"#ffffff"}],"height":3,"kind":"Table","name":"Fluvius smart meter: Metadata (Electricity-specific)","queries":[{"query":"import \"array\"\n\nfields = [\"electricity_switch_position\", \"electricity_threshold\", \"current_max\"]\ntags = [\"meter_id_electr\"]\nwindowSizeMultiplier = 20\n\nfrom(bucket: \"fluvius_smart_meter_downsampled\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"fluvius_smart_meter_electricity\")\n  |> filter(fn: (r) => contains(value: r[\"_field\"], set: fields))\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"] |> array.concat(v: tags))\n  |> aggregateWindow(every: duration(v: int(v: v.windowPeriod) * windowSizeMultiplier), fn: last, createEmpty: false) // Limit output size by downsampling\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\") // Make all fields also columns like tags\n  |> drop(columns: [\"_start\", \"_stop\"])\n  |> group(columns: []) // Reset grouping"}],"staticLegend":{},"tableOptions":{"verticalTimeAxis":true},"timeFormat":"YYYY-MM-DD HH:mm:ss","width":5,"xPos":4,"yPos":3},{"axes":[{"name":"x"},{"label":"Healthy","name":"y","domain":[-0.5,1.5]}],"colors":[{"hex":"#31C0F6"},{"hex":"#BC00B8"},{"hex":"#FF7E27"}],"generateYAxisTicks":["yTickStep","yTickStart","yTotalTicks"],"height":3,"kind":"Scatter","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":-1,"name":"Heartbeats","queries":[{"query":"from(bucket: \"heartbeat\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"heartbeat\")\n  |> filter(fn: (r) => r[\"_field\"] == \"healthy\")\n  |> aggregateWindow(every: v.windowPeriod, fn: min, createEmpty: false)\n  |> yield(name: \"min\")"}],"staticLegend":{},"width":6,"xCol":"_time","xPos":6,"yCol":"_value","yTickStep":1,"yTotalTicks":2},{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","label":"Total gas consumption","name":"y","scale":"linear","suffix":"mÂ³"}],"colorizeRows":true,"colors":[{"id":"base","name":"laser","type":"text","hex":"#00C9FF"}],"decimalPlaces":2,"height":4,"hoverDimension":"auto","kind":"Single_Stat_Plus_Line","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Fluvius smart meter: Gas live values","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"import \"array\"\nimport \"math\"\n\nfields = [\"gas_m3\"]\ntags = [\"gas_m3_original_timestamp\"]\nwindowSizeMultiplier = 1\n\nfrom(bucket: \"fluvius_smart_meter_downsampled\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"fluvius_smart_meter_gas\")\n  |> filter(fn: (r) => contains(value: r[\"_field\"], set: fields))\n  |> keep(columns: [\"_time\", \"_start\", \"_stop\", \"_field\", \"_value\"] |> array.concat(v: tags))\n  |> aggregateWindow(every: duration(v: int(v: v.windowPeriod) * windowSizeMultiplier), fn: mean, createEmpty: false) // Limit output size by downsampling\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> drop(columns: [\"_start\", \"_stop\"])\n  |> group(columns: []) // Reset grouping\n  |> map(fn: (r) => ({r with gas_m3: (math.round(x: r.gas_m3 * 1000.0) / 1000.0)}))"}],"shade":true,"staticLegend":{"colorizeRows":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":6,"widthRatio":1,"xPos":6,"yPos":6},{"colors":[{"id":"0","name":"viridian","type":"min","hex":"#32B08C"},{"id":"1","name":"fire","type":"max","hex":"#DC4E58","value":100}],"decimalPlaces":2,"height":3,"kind":"Gauge","name":"Host RPi disk usage %","queries":[{"query":"from(bucket: \"disk\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"disk\")\n  |> filter(fn: (r) => r[\"_field\"] == \"used_percent\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")"}],"staticLegend":{},"suffix":"%","tickSuffix":"%","width":3,"xPos":9,"yPos":3}],"name":"General"}}]